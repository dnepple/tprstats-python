tprstats.models
===============

.. py:module:: tprstats.models






Module Contents
---------------

.. py:class:: ExogMixin

   .. py:method:: handle_exog(exog)

      Creates a design matrix for out-of-sample data based on the given model's formula ModelSpec.



.. py:class:: LinearModels(formula, data, **kwargs)



   Base class for linear models. This class wraps statsmodels' RegressionResults and provides additional methods relevant to linear models.


   .. py:attribute:: model


   .. py:attribute:: data


   .. py:attribute:: formula


   .. py:method:: summary(**kwargs)


   .. py:method:: predict(exog=None, *args, **kwargs)


   .. py:method:: cite()

      Returns citations for the source of the model.



   .. py:method:: prediction_intervals(exog=None, alpha=0.05)

      Returns a table of prediction intervals.



   .. py:method:: standardized_coefficients()

      Returns the standardized coefficients.
      A standardized coefficient is the coefficient obtained from a regression in which both the independent variable and the dependent variable are standardized to have mean equal to zero and standard deviation equal to one.

      :returns: Standardized Coefficients
      :rtype: pandas.Series



   .. py:method:: elasticities()

      Elasticities evaluated at the means of the variables are calculated for the coefficients of a linear regression model.



   .. py:method:: scaled_coefficients()

      Returns a pandas.Dataframe containing the standardized cofficients (also known as beta weights) and elasticities.
      A standardized coefficient is the coefficient obtained from a regression in which both the independent variable and the dependent variable are standardized to have mean equal to zero and standard deviation equal to one.
      The function reports three columns which contain the coefficients, the standardized coefficients, and the elasticities evaluated at the means of the variables.



   .. py:method:: plot_actual_fitted()

      Plots actual values and predicted values with upper and lower prediction intervals for the given linear model.



   .. py:method:: wald_test(hypothesis)

      Test for linear relationships among multiple coefficients.

      :param hypothesis: The test hypothesis specified as a string.



   .. py:method:: ramsey_test()

      Model specification test used to test functional form. The Ramsey Test is often called the "Ramsey RESET test" which stands for "Ramsey Regression Equation Specification Error Test."

      Power notation is different in Python's statsmodels and R. Power=2 in Python is equivalent to Power=1 in R.

      :returns: Frame with columns [power, pvalue]
      :rtype: pandas.DataFrame



   .. py:method:: coefficients_and_covariance()

      Extracts the coefficients and covariance matrix from a statsmodel regression..

      :returns: Returns a tuple containing (coefficients, covariance_matrix)
      :rtype: Tuple



   .. py:method:: coefficients_and_covariance_frame()

      Returns a Pandas DataFrame of the cofficients and covariance matrix.

      :returns: A dataframe containing the cofficients, and covariance matrix.
      :rtype: pandas.DataFrame



   .. py:method:: coefficients_draw(size=1)

      Given a regression model, this function takes a random draw for the coefficients.

      :param size: Number of draws. Defaults to 1.
      :type size: int, optional

      :returns: Draw(s) from the coefficients.
      :rtype: pandas.DataFrame



   .. py:method:: handle_exog(exog)

      Creates a design matrix for out-of-sample data based on the given model's formula ModelSpec.



.. py:class:: TimeSeriesLinearModel(formula, data, **kwargs)



   Base class for linear models. This class wraps statsmodels' RegressionResults and provides additional methods relevant to linear models.


   .. py:attribute:: result


   .. py:attribute:: model


   .. py:attribute:: data


   .. py:attribute:: formula


   .. py:method:: summary(**kwargs)


   .. py:method:: predict(exog=None, *args, **kwargs)


   .. py:method:: cite()

      Returns citations for the source of the model.



   .. py:method:: prediction_intervals(exog=None, alpha=0.05)

      Returns a table of prediction intervals.



   .. py:method:: standardized_coefficients()

      Returns the standardized coefficients.
      A standardized coefficient is the coefficient obtained from a regression in which both the independent variable and the dependent variable are standardized to have mean equal to zero and standard deviation equal to one.

      :returns: Standardized Coefficients
      :rtype: pandas.Series



   .. py:method:: elasticities()

      Elasticities evaluated at the means of the variables are calculated for the coefficients of a linear regression model.



   .. py:method:: scaled_coefficients()

      Returns a pandas.Dataframe containing the standardized cofficients (also known as beta weights) and elasticities.
      A standardized coefficient is the coefficient obtained from a regression in which both the independent variable and the dependent variable are standardized to have mean equal to zero and standard deviation equal to one.
      The function reports three columns which contain the coefficients, the standardized coefficients, and the elasticities evaluated at the means of the variables.



   .. py:method:: plot_actual_fitted()

      Plots actual values and predicted values with upper and lower prediction intervals for the given linear model.



   .. py:method:: wald_test(hypothesis)

      Test for linear relationships among multiple coefficients.

      :param hypothesis: The test hypothesis specified as a string.



   .. py:method:: ramsey_test()

      Model specification test used to test functional form. The Ramsey Test is often called the "Ramsey RESET test" which stands for "Ramsey Regression Equation Specification Error Test."

      Power notation is different in Python's statsmodels and R. Power=2 in Python is equivalent to Power=1 in R.

      :returns: Frame with columns [power, pvalue]
      :rtype: pandas.DataFrame



   .. py:method:: coefficients_and_covariance()

      Extracts the coefficients and covariance matrix from a statsmodel regression..

      :returns: Returns a tuple containing (coefficients, covariance_matrix)
      :rtype: Tuple



   .. py:method:: coefficients_and_covariance_frame()

      Returns a Pandas DataFrame of the cofficients and covariance matrix.

      :returns: A dataframe containing the cofficients, and covariance matrix.
      :rtype: pandas.DataFrame



   .. py:method:: coefficients_draw(size=1)

      Given a regression model, this function takes a random draw for the coefficients.

      :param size: Number of draws. Defaults to 1.
      :type size: int, optional

      :returns: Draw(s) from the coefficients.
      :rtype: pandas.DataFrame



   .. py:method:: handle_exog(exog)

      Creates a design matrix for out-of-sample data based on the given model's formula ModelSpec.



.. py:class:: CrossSectionLinearModel(formula, data, **kwargs)



   Base class for linear models. This class wraps statsmodels' RegressionResults and provides additional methods relevant to linear models.


   .. py:attribute:: result


   .. py:attribute:: model


   .. py:attribute:: data


   .. py:attribute:: formula


   .. py:method:: summary(**kwargs)


   .. py:method:: predict(exog=None, *args, **kwargs)


   .. py:method:: cite()

      Returns citations for the source of the model.



   .. py:method:: prediction_intervals(exog=None, alpha=0.05)

      Returns a table of prediction intervals.



   .. py:method:: standardized_coefficients()

      Returns the standardized coefficients.
      A standardized coefficient is the coefficient obtained from a regression in which both the independent variable and the dependent variable are standardized to have mean equal to zero and standard deviation equal to one.

      :returns: Standardized Coefficients
      :rtype: pandas.Series



   .. py:method:: elasticities()

      Elasticities evaluated at the means of the variables are calculated for the coefficients of a linear regression model.



   .. py:method:: scaled_coefficients()

      Returns a pandas.Dataframe containing the standardized cofficients (also known as beta weights) and elasticities.
      A standardized coefficient is the coefficient obtained from a regression in which both the independent variable and the dependent variable are standardized to have mean equal to zero and standard deviation equal to one.
      The function reports three columns which contain the coefficients, the standardized coefficients, and the elasticities evaluated at the means of the variables.



   .. py:method:: plot_actual_fitted()

      Plots actual values and predicted values with upper and lower prediction intervals for the given linear model.



   .. py:method:: wald_test(hypothesis)

      Test for linear relationships among multiple coefficients.

      :param hypothesis: The test hypothesis specified as a string.



   .. py:method:: ramsey_test()

      Model specification test used to test functional form. The Ramsey Test is often called the "Ramsey RESET test" which stands for "Ramsey Regression Equation Specification Error Test."

      Power notation is different in Python's statsmodels and R. Power=2 in Python is equivalent to Power=1 in R.

      :returns: Frame with columns [power, pvalue]
      :rtype: pandas.DataFrame



   .. py:method:: coefficients_and_covariance()

      Extracts the coefficients and covariance matrix from a statsmodel regression..

      :returns: Returns a tuple containing (coefficients, covariance_matrix)
      :rtype: Tuple



   .. py:method:: coefficients_and_covariance_frame()

      Returns a Pandas DataFrame of the cofficients and covariance matrix.

      :returns: A dataframe containing the cofficients, and covariance matrix.
      :rtype: pandas.DataFrame



   .. py:method:: coefficients_draw(size=1)

      Given a regression model, this function takes a random draw for the coefficients.

      :param size: Number of draws. Defaults to 1.
      :type size: int, optional

      :returns: Draw(s) from the coefficients.
      :rtype: pandas.DataFrame



   .. py:method:: handle_exog(exog)

      Creates a design matrix for out-of-sample data based on the given model's formula ModelSpec.



.. py:class:: BinaryChoiceModels(formula, data, **kwargs)



   Base class for Binary Choice Models. Provides general methods related to binary choice models.


   .. py:attribute:: formula


   .. py:method:: predict(exog=None, *args, **kwargs)


   .. py:method:: predict_and_rank(exog)

      Predict probabilities from a binary choice model and order probabilities from lowest to highest.

      :param exog: New explanatory variables.

      :returns: Predictions by rank.



   .. py:method:: classification_table(p_cutoff=None)

      Classification table for binary choice models. For a given estimated model, the classification table rovides a summary of the model's predictive accuracy.

      :param p_cutoff: Predicted probabilities greater than the p_cutoff are classified as 1, and 0 otherwise. If p_cutoff is unspecified, the p_cutoff is set equal to the mean of the predicted probabilities.
      :type p_cutoff: number, optional

      :returns: The classification table for the associated estimated model.
      :rtype: pandas.DataFrame



   .. py:method:: marginal_effects()

      The average change in probability across all observations in the sample when values of a predictor variable increase by one unit and all other predictor variables are held constant.

      :returns: Marginal effects summary table.



   .. py:method:: wald_test_binary(hypothesis)

      Prints the Wald test stastistic and p-value for the given hypothesis.



   .. py:method:: handle_exog(exog)

      Creates a design matrix for out-of-sample data based on the given model's formula ModelSpec.



.. py:class:: LogitModel(formula, data)



   Logit Model.


   .. py:attribute:: model


   .. py:attribute:: result


   .. py:attribute:: data


   .. py:attribute:: formula


   .. py:method:: predict(exog=None, *args, **kwargs)


   .. py:method:: predict_and_rank(exog)

      Predict probabilities from a binary choice model and order probabilities from lowest to highest.

      :param exog: New explanatory variables.

      :returns: Predictions by rank.



   .. py:method:: classification_table(p_cutoff=None)

      Classification table for binary choice models. For a given estimated model, the classification table rovides a summary of the model's predictive accuracy.

      :param p_cutoff: Predicted probabilities greater than the p_cutoff are classified as 1, and 0 otherwise. If p_cutoff is unspecified, the p_cutoff is set equal to the mean of the predicted probabilities.
      :type p_cutoff: number, optional

      :returns: The classification table for the associated estimated model.
      :rtype: pandas.DataFrame



   .. py:method:: marginal_effects()

      The average change in probability across all observations in the sample when values of a predictor variable increase by one unit and all other predictor variables are held constant.

      :returns: Marginal effects summary table.



   .. py:method:: wald_test_binary(hypothesis)

      Prints the Wald test stastistic and p-value for the given hypothesis.



   .. py:method:: handle_exog(exog)

      Creates a design matrix for out-of-sample data based on the given model's formula ModelSpec.



.. py:class:: ProbitModel(formula, data)



   Probit Models.


   .. py:attribute:: model


   .. py:attribute:: result


   .. py:attribute:: data


   .. py:attribute:: formula


   .. py:method:: predict(exog=None, *args, **kwargs)


   .. py:method:: predict_and_rank(exog)

      Predict probabilities from a binary choice model and order probabilities from lowest to highest.

      :param exog: New explanatory variables.

      :returns: Predictions by rank.



   .. py:method:: classification_table(p_cutoff=None)

      Classification table for binary choice models. For a given estimated model, the classification table rovides a summary of the model's predictive accuracy.

      :param p_cutoff: Predicted probabilities greater than the p_cutoff are classified as 1, and 0 otherwise. If p_cutoff is unspecified, the p_cutoff is set equal to the mean of the predicted probabilities.
      :type p_cutoff: number, optional

      :returns: The classification table for the associated estimated model.
      :rtype: pandas.DataFrame



   .. py:method:: marginal_effects()

      The average change in probability across all observations in the sample when values of a predictor variable increase by one unit and all other predictor variables are held constant.

      :returns: Marginal effects summary table.



   .. py:method:: wald_test_binary(hypothesis)

      Prints the Wald test stastistic and p-value for the given hypothesis.



   .. py:method:: handle_exog(exog)

      Creates a design matrix for out-of-sample data based on the given model's formula ModelSpec.



.. py:class:: ARIMAModel(formula, data, order=(1, 0, 0), **kwargs)



   .. py:attribute:: formula


   .. py:attribute:: model


   .. py:attribute:: result


   .. py:method:: predict(exog, *args, **kwargs)


   .. py:method:: handle_exog(exog)

      Creates a design matrix for out-of-sample data based on the given model's formula ModelSpec.



.. py:function:: model(name, formula, data, **kwargs)

   Constructs a model for the given model name. Valid names are "cs" for cross-sectional linear model, "ts" for time series linear model, "logit" for logit model, "probit" for probit model,  and "arima" for ARIMA model.

   :param name: Name of model to be constructed.
   :type name: str
   :param formula: Formula used to construct the model object.
   :type formula: formula_like
   :param data: Data to fit the model.
   :type data: Dataframe

   :raises ValueError: Raises when the name value is not recognized.

   :returns: A model object for the given model name.


